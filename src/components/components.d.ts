/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChatBotMessage } from "../interfaces/IChatBot";
import { TLoanAmountPreset } from "./_presets/loan-amount/LoanAmountPresets";
import { ChartData, ChartOptions } from "chart.js";
import { ILeadboxAutoType, ILeadboxTheme, TAmountParam, TBusinessType, TCreditRating, THomeLoanType, TPersonalLoanPurposeCode } from "../interfaces/index";
import { DropdownOption } from "../interfaces/IDropdown";
export { ChatBotMessage } from "../interfaces/IChatBot";
export { TLoanAmountPreset } from "./_presets/loan-amount/LoanAmountPresets";
export { ChartData, ChartOptions } from "chart.js";
export { ILeadboxAutoType, ILeadboxTheme, TAmountParam, TBusinessType, TCreditRating, THomeLoanType, TPersonalLoanPurposeCode } from "../interfaces/index";
export { DropdownOption } from "../interfaces/IDropdown";
export namespace Components {
    interface InnerOne {
        "name": string;
    }
    interface LtcAccordion {
        /**
          * The tag for a header text element (inside of the button)
         */
        "headerTag": string;
        /**
          * This is a text string that will display as the main text headline of the accordion.
         */
        "mainHeadline": string;
    }
    interface LtcAiMessage {
        /**
          * ChatBot message to render
         */
        "message": ChatBotMessage;
    }
    interface LtcAiMessagesList {
    }
    interface LtcAmountFormPreset {
        /**
          * Open the CTA action in a new browser window, or if "false" (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Preset name. See the documentation for specific settings in presets.
         */
        "preset": TLoanAmountPreset;
    }
    interface LtcBarChart {
        /**
          * Accessibility label for the canvas image.
         */
        "canvasAriaLabel": string;
        /**
          * Cart.js data parameter, contains labels, datasets...
         */
        "chartData": ChartData<'bar'>;
        /**
          * Approximate height of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartHeight": number;
        /**
          * Cart.js options for the Bar chart.
         */
        "chartOptions": ChartOptions<'bar'>;
        /**
          * Approximate width of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartWidth": number;
    }
    interface LtcChatbot {
    }
    interface LtcDebtConsolidation {
        /**
          * Button text which is used to redirect to Offers page.
         */
        "buttonText": string;
        /**
          * Initially selected credit rating.
         */
        "creditRating": TCreditRating;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Redirection splitter-id for "Find Your Best Terms" button.
         */
        "splitterId": string;
    }
    interface LtcDoughnutChart {
        /**
          * Accessibility label for the canvas image.
         */
        "canvasAriaLabel": string;
        /**
          * Cart.js data parameter, contains labels, datasets...
         */
        "chartData": ChartData<'doughnut'>;
        /**
          * Approximate height of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartHeight": number;
        /**
          * Cart.js options for the Doughnut chart.
         */
        "chartOptions": ChartOptions<'doughnut'>;
        /**
          * Approximate width of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartWidth": number;
    }
    interface LtcDropdown {
        /**
          * Specify the color of the tiny "V" symbol on the dropdown
         */
        "dropdownIconColor": string;
        /**
          * ID for labelledBy. Assigned automatically
         */
        "dropdownId": string | number;
        /**
          * Sets the label for the dropdown
         */
        "label": string;
        /**
          * Specify the default visible height of the options in the dropdown, in `px`
         */
        "maxHeight": number;
        /**
          * Sets the name of the select form control
         */
        "name": string;
        /**
          * Specify the label and value pairs for all dropdown options. Cannot be used as an attribute.
         */
        "options": DropdownOption[];
        /**
          * The default placeholder option
         */
        "placeholder": string;
        /**
          * Specify the label and value pairs for all dropdown options in `JSON.stringify(DropdownOption[])` format. If present, will override `"options"` property.
         */
        "plainOptions": string;
        /**
          * Specify the index of the initially selected option. Don't use with `"selected-value"`.
         */
        "selectedIndex": number;
        /**
          * Specify the initially selected value. Don't use with `"selected-index"`.
         */
        "selectedValue": DropdownOption['value'];
    }
    interface LtcIcon {
        /**
          * The color to use for the icon. This is optional. By default, the icon adopts the font color.
         */
        "color"?: string;
        /**
          * If enabled, ltc-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
         */
        "lazy": boolean;
        /**
          * Specifies which icon to use from the built-in set of icons.
         */
        "name": string;
        /**
          * The size of the icon. 16 / 24 / 32 / 48 px. This is optional. By default, the icon adopts the font size.
         */
        "size"?: 'tiny' | 'small' | 'medium' | 'large';
    }
    interface LtcInputText {
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled": boolean;
        /**
          * Retrieves a reference to the input element within the component.
          * @returns The input element, or undefined if not found.
          * @example const inputElement = await myComponent.getInputRef(); if (inputElement) {   // Do something with the input element   inputElement.focus(); }
         */
        "getInputRef": () => Promise<HTMLInputElement | undefined>;
        /**
          * Optional property for passing input mask options
         */
        "iMaskOptions": Record<string, unknown>;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId": string;
        /**
          * Text input label
         */
        "label": string;
        /**
          * Name of the input text.
         */
        "name": string;
        /**
          * Value of the input placeholder text
         */
        "placeholder": string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly": boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required": boolean;
        /**
          * Force-sets the values on the element. Use this method in ltcChange listener to refresh mask for unchanged value in controlled component.
          * @param value the value to set
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * Value of the input text
         */
        "value": string;
    }
    interface LtcLeadAutoloan {
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText": string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon": string;
        /**
          * Use this setting to override default footer text
         */
        "footerText": string;
        /**
          * Leadbox header. Set to override default value
         */
        "header": string;
        /**
          * If true, will hide the footer on the Leadbox
         */
        "hideFooter": boolean;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Set `true` to add ZIP input filed
         */
        "showZipInput": boolean;
        /**
          * Leadbox color theme
         */
        "theme": ILeadboxTheme;
        /**
          * Auto Leadbox type. Parameters like header and splitter will change based on this parameter
         */
        "type": ILeadboxAutoType;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont": boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `MyCoolUrlParameter=CoolParameterValue&AndMore=SomethingElse`
         */
        "withQueryParam": string;
    }
    interface LtcLeadHome {
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText": string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon": string;
        /**
          * Use this setting to override default footer text
         */
        "footerText": string;
        /**
          * Leadbox header. Set to override default value
         */
        "header": string;
        /**
          * If `true`, will hide the footer on the Leadbox
         */
        "hideFooter": boolean;
        /**
          * Set `true` to hide Loan Type dropdown select
         */
        "hideLoanTypeSelect": boolean;
        /**
          * Default value for Loan Type dropdown select
         */
        "loanType": THomeLoanType;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Leadbox color theme
         */
        "theme": ILeadboxTheme;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont": boolean;
        /**
          * Default input shown is Purchase Price/Home Value. Set this to `true` to use Down Payment/Remaining Balance input filed.
         */
        "useSecondaryInput": boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `LoanType=mortgage&AndMore=SomethingElse`
         */
        "withQueryParam": string;
    }
    interface LtcLeadPersonal {
        /**
          * Default value Loan Amount input filed
         */
        "amount": number;
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText": string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon": string;
        /**
          * Use this setting to override default footer text
         */
        "footerText": string;
        /**
          * Leadbox header. Set to override default value
         */
        "header": string;
        /**
          * If true, will hide the footer on the Leadbox
         */
        "hideFooter": boolean;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Default value for Loan Purpose dropdown select
         */
        "purpose": TPersonalLoanPurposeCode;
        /**
          * Set `true` to add Loan Amount input filed
         */
        "showAmountInput": boolean;
        /**
          * Set `true` to add Loan Purpose dropdown select
         */
        "showPurposeSelect": boolean;
        /**
          * Set `true` to add ZIP input filed
         */
        "showZipInput": boolean;
        /**
          * Leadbox color theme
         */
        "theme": ILeadboxTheme;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont": boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `PersonalLoanPurposeCode=DEBTCONSOLIDATION&AndMore=SomethingElse`
         */
        "withQueryParam": string;
    }
    interface LtcLeadSmallBusiness {
        /**
          * Default value Loan Amount input filed
         */
        "amount": number;
        /**
          * Default value for Business Type dropdown select
         */
        "businessType": TBusinessType;
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText": string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon": string;
        /**
          * Use this setting to override default footer text
         */
        "footerText": string;
        /**
          * Leadbox header. Set to override default value
         */
        "header": string;
        /**
          * If `true`, will hide the footer on the Leadbox
         */
        "hideFooter": boolean;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Set `true` to add Loan Amount input filed
         */
        "showAmountInput": boolean;
        /**
          * Set `true` to add Business Type dropdown select
         */
        "showBusinessTypeSelect": boolean;
        /**
          * Set `true` to add ZIP input filed
         */
        "showZipInput": boolean;
        /**
          * Leadbox color theme
         */
        "theme": ILeadboxTheme;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont": boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `BusinessType=LLC&AndMore=SomethingElse`
         */
        "withQueryParam": string;
    }
    interface LtcLoadingIndicator {
    }
    interface LtcLoanAmount {
        /**
          * Phoenix forms parameter that holds monetary amount value. For 'wp-mortgage' splitter id the default value is 'PurchasePrice' For other splitter ids the default value is 'Amount'
         */
        "amountParam"?: TAmountParam;
        /**
          * Button text which is used to redirect to Offers page.
         */
        "buttonText": string;
        /**
          * Disclosure link text.
         */
        "disclosureText": string;
        /**
          * Disclosure-Tokens value, which is used to redirect user to respective Advertising Disclosures Offers page.
         */
        "disclosureTokens": string;
        /**
          * Headline text for this calculator.
         */
        "headline": string;
        /**
          * Set true to hide Terms & Conditions (displayed by default)
         */
        "hideTermsAndConditions": boolean;
        /**
          * Initial Loan Amount value.
         */
        "loanAmount": number;
        /**
          * Maximum loan amount.
         */
        "max": number;
        /**
          * Minimum loan amount
         */
        "min": number;
        /**
          * Open the CTA action in a new browser window, or if "false" (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Set true to display Disclosure link
         */
        "showDisclosure": boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for "Calculate Payment" button. <br/> Example: `MyCoolUrlParameter=CoolParameterValue`
         */
        "splitterExtra"?: string;
        /**
          * Redirection splitter-id for "Calculate Payment" button.
         */
        "splitterId": string;
        /**
          * Loan amount value change step.
         */
        "step": number;
        /**
          * Terms And Conditions text.
         */
        "termsAndConditionsText": string;
    }
    interface LtcLoanPayment {
        /**
          * Turn on the additional params for a loan calculation, such as extra monthly and yearly payments.
         */
        "additionalParams": boolean;
        /**
          * Loan amount, from 1,000 to 1,000,000,000
         */
        "amount": number;
        /**
          * Button text which is used to redirect to Offers page.
         */
        "buttonText": string;
        /**
          * Should the loan details be expanded or hidden by default.
         */
        "expandDetails": boolean;
        /**
          * Extra monthly money you want to pay, from 0 to 100,000 (additionalParams should be true)
         */
        "extraMonthly": number;
        /**
          * Extra yearly money you want to pay, from 0 to 100,000 (additionalParams should be true)
         */
        "extraYearly": number;
        /**
          * Open the CTA action in a new browser window, or if "false" (default) - in the same window.
         */
        "newWindow": boolean;
        /**
          * Loan percentage, from 0 to 300
         */
        "percent": number;
        /**
          * Redirection splitter-id for "View Free Offers" button.
         */
        "splitterId": string;
        /**
          * Loan term in years, from 3 to 7
         */
        "term": number;
    }
    interface LtcMdIcon {
        /**
          * Icon color
         */
        "color": string;
        /**
          * SVG description
         */
        "description"?: string;
        /**
          * Turn on horizontal flip
         */
        "horizontal": boolean;
        /**
          * ID for labelledBy and describedBy attributes. Assigned automatically. Used only if you have Title and Description
         */
        "iconId": string | number;
        /**
          * Additional Icon styles
         */
        "iconStyle": { [key: string]: string | undefined };
        /**
          * SVG title
         */
        "iconTitle": string;
        /**
          * SVG path
         */
        "path": string;
        /**
          * Icon rotation in degrees
         */
        "rotate": number;
        /**
          * The size if string will be used directly, if the size is number will be used as scale factor
         */
        "size"?: string | number;
        /**
          * Turn on spin for a number of second, or 'true' for infinite spin
         */
        "spin": number | boolean;
        /**
          * Turn on vertical flip
         */
        "vertical": boolean;
    }
    interface LtcPartnerCard {
        /**
          * CTA button extra text, placed under the button
         */
        "ctaExtraText": string;
        /**
          * CTA button link
         */
        "ctaLink": string;
        /**
          * CTA button text
         */
        "ctaText": string;
        /**
          * Featured Lender Attributes in JSON array string: `[["prop1", "value1"], ["prop2", "value2"]]`
         */
        "featuredAttributes": string;
        /**
          * If the Lender is featured. Changes the badge style.
         */
        "isFeatured": boolean;
        /**
          * Lender logo URL
         */
        "logoUrl": string;
        /**
          * Main Lender Attribute (top one) in JSON array string: `["prop", "value"]` or `["prop", "value", "tooltip"]`
         */
        "mainAttribute": string;
        /**
          * If `true`, will open the CTA action in a new browser window
         */
        "newWindow": boolean;
        /**
          * Lender rating
         */
        "rating": number;
        /**
          * Lender ratings count
         */
        "ratingCount": number;
        /**
          * Lender rating URL link
         */
        "ratingUrl": string;
    }
    interface LtcSingleCardTile {
        /**
          * The text to display as a badge on the card.
         */
        "badgeText": string;
        /**
          * URL linking to the terms, rates, and fees information for the card.
         */
        "bankTermsUrlRatesAndFees": string;
        /**
          * A unique identifier for the card.
         */
        "cardId": string;
        /**
          * The name of the card to be displayed. May contain HTML.
         */
        "cardName": string;
        /**
          * An array of highlights where each highlight is an array with [name, value, tooltip?]. `tooltip` is an optional string that, if present, provides additional information about the highlight. Example format: `[["Highlight Name", "Highlight Value", "Optional Tooltip"], [...]]` We will be adding Tooltip into the next iteration.
         */
        "highlights": string;
        /**
          * URL of the image to display the card.
         */
        "imageUrl": string;
        /**
          * The name of the card issuer.
         */
        "issuerName": string;
        /**
          * A string containing HTML content to be dynamically rendered within the component.
         */
        "offerTextDetails": string;
        /**
          * The overall star rating for the card. Ratings are on a scale from 1 to 5.
         */
        "overallStarRating": number;
        /**
          * URL to which users are redirected when they choose to apply for the card.
         */
        "redirectApplyNowLink": string;
    }
    interface LtcSlider {
        /**
          * The connect option can be used to control the bar between the handles or the edges of the slider. Pass a list of 0s and 1s for every connecting element, including the edges of the slider. The length of this list must match the handle count + 1. Setting 1 sets the bars between the handles, but not between the handles and the sliders edges.
         */
        "connect": string;
        /**
          * Disable the slider
         */
        "disabled": boolean;
        /**
          * Maximum value
         */
        "max": number;
        /**
          * Minimum value
         */
        "min": number;
        /**
          * The start option sets the number of handles and corresponding start positions.
         */
        "startValues": string;
        /**
          * By default, the slider slides fluently. In order to make the handles jump between intervals, the step option can be used.
         */
        "step"?: number;
    }
    interface LtcStarRating {
        /**
          * Rating value
         */
        "rating": number;
    }
    interface LtcSwitch {
        /**
          * How to control the alignment of the toggle and label on the cross axis.<br> `"start"`: The label and control will appear on the left of the cross axis.<br> `"end"`: The label and control will appear on the right of the cross axis.<br> `"center"`: The label and control will appear at the center of the cross axis.<br> This will only have effect in a top and bottom alignment.
         */
        "alignment": 'start' | 'center' | 'end';
        /**
          * If `true`, the switch is turned ON.
         */
        "checked": boolean;
        /**
          * If `true`, the user cannot interact with the switch.
         */
        "disabled": boolean;
        /**
          * Where to place the label relative to the input.
         */
        "labelPosition": 'right' | 'left' | 'top' | 'bottom';
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name": string;
        /**
          * Sets the type of control. Text or Icons
         */
        "type": 'text' | 'icons';
    }
    interface LtcTooltip {
        /**
          * Make the tooltip always visible. Useful if you control visibility by other means
         */
        "alwaysActive": boolean;
        /**
          * Force the tooltip to use dark theme
         */
        "forceDark": boolean;
        /**
          * Force the tooltip to use light theme
         */
        "forceLight": boolean;
        /**
          * Tooltip position
         */
        "placement": 'top' | 'bottom' | 'right' | 'left';
    }
    interface LtcWpmFooter {
    }
}
export interface LtcDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLtcDropdownElement;
}
export interface LtcInputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLtcInputTextElement;
}
export interface LtcSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLtcSliderElement;
}
export interface LtcSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLtcSwitchElement;
}
declare global {
    interface HTMLInnerOneElement extends Components.InnerOne, HTMLStencilElement {
    }
    var HTMLInnerOneElement: {
        prototype: HTMLInnerOneElement;
        new (): HTMLInnerOneElement;
    };
    interface HTMLLtcAccordionElement extends Components.LtcAccordion, HTMLStencilElement {
    }
    var HTMLLtcAccordionElement: {
        prototype: HTMLLtcAccordionElement;
        new (): HTMLLtcAccordionElement;
    };
    interface HTMLLtcAiMessageElement extends Components.LtcAiMessage, HTMLStencilElement {
    }
    var HTMLLtcAiMessageElement: {
        prototype: HTMLLtcAiMessageElement;
        new (): HTMLLtcAiMessageElement;
    };
    interface HTMLLtcAiMessagesListElement extends Components.LtcAiMessagesList, HTMLStencilElement {
    }
    var HTMLLtcAiMessagesListElement: {
        prototype: HTMLLtcAiMessagesListElement;
        new (): HTMLLtcAiMessagesListElement;
    };
    interface HTMLLtcAmountFormPresetElement extends Components.LtcAmountFormPreset, HTMLStencilElement {
    }
    var HTMLLtcAmountFormPresetElement: {
        prototype: HTMLLtcAmountFormPresetElement;
        new (): HTMLLtcAmountFormPresetElement;
    };
    interface HTMLLtcBarChartElement extends Components.LtcBarChart, HTMLStencilElement {
    }
    var HTMLLtcBarChartElement: {
        prototype: HTMLLtcBarChartElement;
        new (): HTMLLtcBarChartElement;
    };
    interface HTMLLtcChatbotElement extends Components.LtcChatbot, HTMLStencilElement {
    }
    var HTMLLtcChatbotElement: {
        prototype: HTMLLtcChatbotElement;
        new (): HTMLLtcChatbotElement;
    };
    interface HTMLLtcDebtConsolidationElement extends Components.LtcDebtConsolidation, HTMLStencilElement {
    }
    var HTMLLtcDebtConsolidationElement: {
        prototype: HTMLLtcDebtConsolidationElement;
        new (): HTMLLtcDebtConsolidationElement;
    };
    interface HTMLLtcDoughnutChartElement extends Components.LtcDoughnutChart, HTMLStencilElement {
    }
    var HTMLLtcDoughnutChartElement: {
        prototype: HTMLLtcDoughnutChartElement;
        new (): HTMLLtcDoughnutChartElement;
    };
    interface HTMLLtcDropdownElementEventMap {
        "optionSelect": DropdownOption['value'];
    }
    interface HTMLLtcDropdownElement extends Components.LtcDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLtcDropdownElementEventMap>(type: K, listener: (this: HTMLLtcDropdownElement, ev: LtcDropdownCustomEvent<HTMLLtcDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLtcDropdownElementEventMap>(type: K, listener: (this: HTMLLtcDropdownElement, ev: LtcDropdownCustomEvent<HTMLLtcDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLtcDropdownElement: {
        prototype: HTMLLtcDropdownElement;
        new (): HTMLLtcDropdownElement;
    };
    interface HTMLLtcIconElement extends Components.LtcIcon, HTMLStencilElement {
    }
    var HTMLLtcIconElement: {
        prototype: HTMLLtcIconElement;
        new (): HTMLLtcIconElement;
    };
    interface HTMLLtcInputTextElementEventMap {
        "ltcChange": string;
    }
    interface HTMLLtcInputTextElement extends Components.LtcInputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLtcInputTextElementEventMap>(type: K, listener: (this: HTMLLtcInputTextElement, ev: LtcInputTextCustomEvent<HTMLLtcInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLtcInputTextElementEventMap>(type: K, listener: (this: HTMLLtcInputTextElement, ev: LtcInputTextCustomEvent<HTMLLtcInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLtcInputTextElement: {
        prototype: HTMLLtcInputTextElement;
        new (): HTMLLtcInputTextElement;
    };
    interface HTMLLtcLeadAutoloanElement extends Components.LtcLeadAutoloan, HTMLStencilElement {
    }
    var HTMLLtcLeadAutoloanElement: {
        prototype: HTMLLtcLeadAutoloanElement;
        new (): HTMLLtcLeadAutoloanElement;
    };
    interface HTMLLtcLeadHomeElement extends Components.LtcLeadHome, HTMLStencilElement {
    }
    var HTMLLtcLeadHomeElement: {
        prototype: HTMLLtcLeadHomeElement;
        new (): HTMLLtcLeadHomeElement;
    };
    interface HTMLLtcLeadPersonalElement extends Components.LtcLeadPersonal, HTMLStencilElement {
    }
    var HTMLLtcLeadPersonalElement: {
        prototype: HTMLLtcLeadPersonalElement;
        new (): HTMLLtcLeadPersonalElement;
    };
    interface HTMLLtcLeadSmallBusinessElement extends Components.LtcLeadSmallBusiness, HTMLStencilElement {
    }
    var HTMLLtcLeadSmallBusinessElement: {
        prototype: HTMLLtcLeadSmallBusinessElement;
        new (): HTMLLtcLeadSmallBusinessElement;
    };
    interface HTMLLtcLoadingIndicatorElement extends Components.LtcLoadingIndicator, HTMLStencilElement {
    }
    var HTMLLtcLoadingIndicatorElement: {
        prototype: HTMLLtcLoadingIndicatorElement;
        new (): HTMLLtcLoadingIndicatorElement;
    };
    interface HTMLLtcLoanAmountElement extends Components.LtcLoanAmount, HTMLStencilElement {
    }
    var HTMLLtcLoanAmountElement: {
        prototype: HTMLLtcLoanAmountElement;
        new (): HTMLLtcLoanAmountElement;
    };
    interface HTMLLtcLoanPaymentElement extends Components.LtcLoanPayment, HTMLStencilElement {
    }
    var HTMLLtcLoanPaymentElement: {
        prototype: HTMLLtcLoanPaymentElement;
        new (): HTMLLtcLoanPaymentElement;
    };
    interface HTMLLtcMdIconElement extends Components.LtcMdIcon, HTMLStencilElement {
    }
    var HTMLLtcMdIconElement: {
        prototype: HTMLLtcMdIconElement;
        new (): HTMLLtcMdIconElement;
    };
    interface HTMLLtcPartnerCardElement extends Components.LtcPartnerCard, HTMLStencilElement {
    }
    var HTMLLtcPartnerCardElement: {
        prototype: HTMLLtcPartnerCardElement;
        new (): HTMLLtcPartnerCardElement;
    };
    interface HTMLLtcSingleCardTileElement extends Components.LtcSingleCardTile, HTMLStencilElement {
    }
    var HTMLLtcSingleCardTileElement: {
        prototype: HTMLLtcSingleCardTileElement;
        new (): HTMLLtcSingleCardTileElement;
    };
    interface HTMLLtcSliderElementEventMap {
        "ltChange": (string | number)[];
        "ltEnd": (string | number)[];
        "ltSet": (string | number)[];
        "ltSlide": (string | number)[];
        "ltStart": (string | number)[];
        "ltUpdate": (string | number)[];
    }
    interface HTMLLtcSliderElement extends Components.LtcSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLtcSliderElementEventMap>(type: K, listener: (this: HTMLLtcSliderElement, ev: LtcSliderCustomEvent<HTMLLtcSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLtcSliderElementEventMap>(type: K, listener: (this: HTMLLtcSliderElement, ev: LtcSliderCustomEvent<HTMLLtcSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLtcSliderElement: {
        prototype: HTMLLtcSliderElement;
        new (): HTMLLtcSliderElement;
    };
    interface HTMLLtcStarRatingElement extends Components.LtcStarRating, HTMLStencilElement {
    }
    var HTMLLtcStarRatingElement: {
        prototype: HTMLLtcStarRatingElement;
        new (): HTMLLtcStarRatingElement;
    };
    interface HTMLLtcSwitchElementEventMap {
        "ltcChange": boolean;
        "ltcFocus": void;
        "ltcBlur": void;
    }
    interface HTMLLtcSwitchElement extends Components.LtcSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLtcSwitchElementEventMap>(type: K, listener: (this: HTMLLtcSwitchElement, ev: LtcSwitchCustomEvent<HTMLLtcSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLtcSwitchElementEventMap>(type: K, listener: (this: HTMLLtcSwitchElement, ev: LtcSwitchCustomEvent<HTMLLtcSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLtcSwitchElement: {
        prototype: HTMLLtcSwitchElement;
        new (): HTMLLtcSwitchElement;
    };
    interface HTMLLtcTooltipElement extends Components.LtcTooltip, HTMLStencilElement {
    }
    var HTMLLtcTooltipElement: {
        prototype: HTMLLtcTooltipElement;
        new (): HTMLLtcTooltipElement;
    };
    interface HTMLLtcWpmFooterElement extends Components.LtcWpmFooter, HTMLStencilElement {
    }
    var HTMLLtcWpmFooterElement: {
        prototype: HTMLLtcWpmFooterElement;
        new (): HTMLLtcWpmFooterElement;
    };
    interface HTMLElementTagNameMap {
        "inner-one": HTMLInnerOneElement;
        "ltc-accordion": HTMLLtcAccordionElement;
        "ltc-ai-message": HTMLLtcAiMessageElement;
        "ltc-ai-messages-list": HTMLLtcAiMessagesListElement;
        "ltc-amount-form-preset": HTMLLtcAmountFormPresetElement;
        "ltc-bar-chart": HTMLLtcBarChartElement;
        "ltc-chatbot": HTMLLtcChatbotElement;
        "ltc-debt-consolidation": HTMLLtcDebtConsolidationElement;
        "ltc-doughnut-chart": HTMLLtcDoughnutChartElement;
        "ltc-dropdown": HTMLLtcDropdownElement;
        "ltc-icon": HTMLLtcIconElement;
        "ltc-input-text": HTMLLtcInputTextElement;
        "ltc-lead-autoloan": HTMLLtcLeadAutoloanElement;
        "ltc-lead-home": HTMLLtcLeadHomeElement;
        "ltc-lead-personal": HTMLLtcLeadPersonalElement;
        "ltc-lead-small-business": HTMLLtcLeadSmallBusinessElement;
        "ltc-loading-indicator": HTMLLtcLoadingIndicatorElement;
        "ltc-loan-amount": HTMLLtcLoanAmountElement;
        "ltc-loan-payment": HTMLLtcLoanPaymentElement;
        "ltc-md-icon": HTMLLtcMdIconElement;
        "ltc-partner-card": HTMLLtcPartnerCardElement;
        "ltc-single-card-tile": HTMLLtcSingleCardTileElement;
        "ltc-slider": HTMLLtcSliderElement;
        "ltc-star-rating": HTMLLtcStarRatingElement;
        "ltc-switch": HTMLLtcSwitchElement;
        "ltc-tooltip": HTMLLtcTooltipElement;
        "ltc-wpm-footer": HTMLLtcWpmFooterElement;
    }
}
declare namespace LocalJSX {
    interface InnerOne {
        "name"?: string;
    }
    interface LtcAccordion {
        /**
          * The tag for a header text element (inside of the button)
         */
        "headerTag"?: string;
        /**
          * This is a text string that will display as the main text headline of the accordion.
         */
        "mainHeadline"?: string;
    }
    interface LtcAiMessage {
        /**
          * ChatBot message to render
         */
        "message"?: ChatBotMessage;
    }
    interface LtcAiMessagesList {
    }
    interface LtcAmountFormPreset {
        /**
          * Open the CTA action in a new browser window, or if "false" (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Preset name. See the documentation for specific settings in presets.
         */
        "preset": TLoanAmountPreset;
    }
    interface LtcBarChart {
        /**
          * Accessibility label for the canvas image.
         */
        "canvasAriaLabel"?: string;
        /**
          * Cart.js data parameter, contains labels, datasets...
         */
        "chartData"?: ChartData<'bar'>;
        /**
          * Approximate height of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartHeight"?: number;
        /**
          * Cart.js options for the Bar chart.
         */
        "chartOptions"?: ChartOptions<'bar'>;
        /**
          * Approximate width of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartWidth"?: number;
    }
    interface LtcChatbot {
    }
    interface LtcDebtConsolidation {
        /**
          * Button text which is used to redirect to Offers page.
         */
        "buttonText"?: string;
        /**
          * Initially selected credit rating.
         */
        "creditRating"?: TCreditRating;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Redirection splitter-id for "Find Your Best Terms" button.
         */
        "splitterId"?: string;
    }
    interface LtcDoughnutChart {
        /**
          * Accessibility label for the canvas image.
         */
        "canvasAriaLabel"?: string;
        /**
          * Cart.js data parameter, contains labels, datasets...
         */
        "chartData"?: ChartData<'doughnut'>;
        /**
          * Approximate height of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartHeight"?: number;
        /**
          * Cart.js options for the Doughnut chart.
         */
        "chartOptions"?: ChartOptions<'doughnut'>;
        /**
          * Approximate width of the chart for initial rendering and for maintaining aspect ratio.
         */
        "chartWidth"?: number;
    }
    interface LtcDropdown {
        /**
          * Specify the color of the tiny "V" symbol on the dropdown
         */
        "dropdownIconColor"?: string;
        /**
          * ID for labelledBy. Assigned automatically
         */
        "dropdownId"?: string | number;
        /**
          * Sets the label for the dropdown
         */
        "label"?: string;
        /**
          * Specify the default visible height of the options in the dropdown, in `px`
         */
        "maxHeight"?: number;
        /**
          * Sets the name of the select form control
         */
        "name"?: string;
        /**
          * This DOM event is fired when dropdown option is selected.
         */
        "onOptionSelect"?: (event: LtcDropdownCustomEvent<DropdownOption['value']>) => void;
        /**
          * Specify the label and value pairs for all dropdown options. Cannot be used as an attribute.
         */
        "options"?: DropdownOption[];
        /**
          * The default placeholder option
         */
        "placeholder"?: string;
        /**
          * Specify the label and value pairs for all dropdown options in `JSON.stringify(DropdownOption[])` format. If present, will override `"options"` property.
         */
        "plainOptions"?: string;
        /**
          * Specify the index of the initially selected option. Don't use with `"selected-value"`.
         */
        "selectedIndex"?: number;
        /**
          * Specify the initially selected value. Don't use with `"selected-index"`.
         */
        "selectedValue"?: DropdownOption['value'];
    }
    interface LtcIcon {
        /**
          * The color to use for the icon. This is optional. By default, the icon adopts the font color.
         */
        "color"?: string;
        /**
          * If enabled, ltc-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
         */
        "lazy"?: boolean;
        /**
          * Specifies which icon to use from the built-in set of icons.
         */
        "name": string;
        /**
          * The size of the icon. 16 / 24 / 32 / 48 px. This is optional. By default, the icon adopts the font size.
         */
        "size"?: 'tiny' | 'small' | 'medium' | 'large';
    }
    interface LtcInputText {
        /**
          * When present, it specifies that the element should be disabled
         */
        "disabled"?: boolean;
        /**
          * Optional property for passing input mask options
         */
        "iMaskOptions"?: Record<string, unknown>;
        /**
          * Identifier of the focus input to match a label defined for the component.
         */
        "inputId"?: string;
        /**
          * Text input label
         */
        "label"?: string;
        /**
          * Name of the input text.
         */
        "name"?: string;
        /**
          * Fired when value of input text changes
         */
        "onLtcChange"?: (event: LtcInputTextCustomEvent<string>) => void;
        /**
          * Value of the input placeholder text
         */
        "placeholder"?: string;
        /**
          * When present, it specifies that the element value cannot be changed
         */
        "readonly"?: boolean;
        /**
          * When present, it specifies that an input field is required.
         */
        "required"?: boolean;
        /**
          * Value of the input text
         */
        "value"?: string;
    }
    interface LtcLeadAutoloan {
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText"?: string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon"?: string;
        /**
          * Use this setting to override default footer text
         */
        "footerText"?: string;
        /**
          * Leadbox header. Set to override default value
         */
        "header"?: string;
        /**
          * If true, will hide the footer on the Leadbox
         */
        "hideFooter"?: boolean;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Set `true` to add ZIP input filed
         */
        "showZipInput"?: boolean;
        /**
          * Leadbox color theme
         */
        "theme"?: ILeadboxTheme;
        /**
          * Auto Leadbox type. Parameters like header and splitter will change based on this parameter
         */
        "type"?: ILeadboxAutoType;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont"?: boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `MyCoolUrlParameter=CoolParameterValue&AndMore=SomethingElse`
         */
        "withQueryParam"?: string;
    }
    interface LtcLeadHome {
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText"?: string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon"?: string;
        /**
          * Use this setting to override default footer text
         */
        "footerText"?: string;
        /**
          * Leadbox header. Set to override default value
         */
        "header"?: string;
        /**
          * If `true`, will hide the footer on the Leadbox
         */
        "hideFooter"?: boolean;
        /**
          * Set `true` to hide Loan Type dropdown select
         */
        "hideLoanTypeSelect"?: boolean;
        /**
          * Default value for Loan Type dropdown select
         */
        "loanType"?: THomeLoanType;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Leadbox color theme
         */
        "theme"?: ILeadboxTheme;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont"?: boolean;
        /**
          * Default input shown is Purchase Price/Home Value. Set this to `true` to use Down Payment/Remaining Balance input filed.
         */
        "useSecondaryInput"?: boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `LoanType=mortgage&AndMore=SomethingElse`
         */
        "withQueryParam"?: string;
    }
    interface LtcLeadPersonal {
        /**
          * Default value Loan Amount input filed
         */
        "amount"?: number;
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText"?: string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon"?: string;
        /**
          * Use this setting to override default footer text
         */
        "footerText"?: string;
        /**
          * Leadbox header. Set to override default value
         */
        "header"?: string;
        /**
          * If true, will hide the footer on the Leadbox
         */
        "hideFooter"?: boolean;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Default value for Loan Purpose dropdown select
         */
        "purpose"?: TPersonalLoanPurposeCode;
        /**
          * Set `true` to add Loan Amount input filed
         */
        "showAmountInput"?: boolean;
        /**
          * Set `true` to add Loan Purpose dropdown select
         */
        "showPurposeSelect"?: boolean;
        /**
          * Set `true` to add ZIP input filed
         */
        "showZipInput"?: boolean;
        /**
          * Leadbox color theme
         */
        "theme"?: ILeadboxTheme;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont"?: boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `PersonalLoanPurposeCode=DEBTCONSOLIDATION&AndMore=SomethingElse`
         */
        "withQueryParam"?: string;
    }
    interface LtcLeadSmallBusiness {
        /**
          * Default value Loan Amount input filed
         */
        "amount"?: number;
        /**
          * Default value for Business Type dropdown select
         */
        "businessType"?: TBusinessType;
        /**
          * Use this setting to override default CTA button text
         */
        "ctaText"?: string;
        /**
          * Use this setting to override default footer icon. For available icons see the `ltc-icon` documentation.
         */
        "footerIcon"?: string;
        /**
          * Use this setting to override default footer text
         */
        "footerText"?: string;
        /**
          * Leadbox header. Set to override default value
         */
        "header"?: string;
        /**
          * If `true`, will hide the footer on the Leadbox
         */
        "hideFooter"?: boolean;
        /**
          * If `true`, open the CTA action in a new browser window, if not (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Set `true` to add Loan Amount input filed
         */
        "showAmountInput"?: boolean;
        /**
          * Set `true` to add Business Type dropdown select
         */
        "showBusinessTypeSelect"?: boolean;
        /**
          * Set `true` to add ZIP input filed
         */
        "showZipInput"?: boolean;
        /**
          * Leadbox color theme
         */
        "theme"?: ILeadboxTheme;
        /**
          * Level of the header, if `true` will render header as H1, otherwise H3. Also, H1 will be styled with DM-Serif, H3 with Lato
         */
        "useHeadlineFont"?: boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for CTA button. <br/> Example: `BusinessType=LLC&AndMore=SomethingElse`
         */
        "withQueryParam"?: string;
    }
    interface LtcLoadingIndicator {
    }
    interface LtcLoanAmount {
        /**
          * Phoenix forms parameter that holds monetary amount value. For 'wp-mortgage' splitter id the default value is 'PurchasePrice' For other splitter ids the default value is 'Amount'
         */
        "amountParam"?: TAmountParam;
        /**
          * Button text which is used to redirect to Offers page.
         */
        "buttonText"?: string;
        /**
          * Disclosure link text.
         */
        "disclosureText"?: string;
        /**
          * Disclosure-Tokens value, which is used to redirect user to respective Advertising Disclosures Offers page.
         */
        "disclosureTokens"?: string;
        /**
          * Headline text for this calculator.
         */
        "headline"?: string;
        /**
          * Set true to hide Terms & Conditions (displayed by default)
         */
        "hideTermsAndConditions"?: boolean;
        /**
          * Initial Loan Amount value.
         */
        "loanAmount"?: number;
        /**
          * Maximum loan amount.
         */
        "max"?: number;
        /**
          * Minimum loan amount
         */
        "min"?: number;
        /**
          * Open the CTA action in a new browser window, or if "false" (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Set true to display Disclosure link
         */
        "showDisclosure"?: boolean;
        /**
          * Any extra parameters that you want to add to a splitter-id URL for "Calculate Payment" button. <br/> Example: `MyCoolUrlParameter=CoolParameterValue`
         */
        "splitterExtra"?: string;
        /**
          * Redirection splitter-id for "Calculate Payment" button.
         */
        "splitterId"?: string;
        /**
          * Loan amount value change step.
         */
        "step"?: number;
        /**
          * Terms And Conditions text.
         */
        "termsAndConditionsText"?: string;
    }
    interface LtcLoanPayment {
        /**
          * Turn on the additional params for a loan calculation, such as extra monthly and yearly payments.
         */
        "additionalParams"?: boolean;
        /**
          * Loan amount, from 1,000 to 1,000,000,000
         */
        "amount"?: number;
        /**
          * Button text which is used to redirect to Offers page.
         */
        "buttonText"?: string;
        /**
          * Should the loan details be expanded or hidden by default.
         */
        "expandDetails"?: boolean;
        /**
          * Extra monthly money you want to pay, from 0 to 100,000 (additionalParams should be true)
         */
        "extraMonthly"?: number;
        /**
          * Extra yearly money you want to pay, from 0 to 100,000 (additionalParams should be true)
         */
        "extraYearly"?: number;
        /**
          * Open the CTA action in a new browser window, or if "false" (default) - in the same window.
         */
        "newWindow"?: boolean;
        /**
          * Loan percentage, from 0 to 300
         */
        "percent"?: number;
        /**
          * Redirection splitter-id for "View Free Offers" button.
         */
        "splitterId"?: string;
        /**
          * Loan term in years, from 3 to 7
         */
        "term"?: number;
    }
    interface LtcMdIcon {
        /**
          * Icon color
         */
        "color"?: string;
        /**
          * SVG description
         */
        "description"?: string;
        /**
          * Turn on horizontal flip
         */
        "horizontal"?: boolean;
        /**
          * ID for labelledBy and describedBy attributes. Assigned automatically. Used only if you have Title and Description
         */
        "iconId"?: string | number;
        /**
          * Additional Icon styles
         */
        "iconStyle"?: { [key: string]: string | undefined };
        /**
          * SVG title
         */
        "iconTitle": string;
        /**
          * SVG path
         */
        "path": string;
        /**
          * Icon rotation in degrees
         */
        "rotate"?: number;
        /**
          * The size if string will be used directly, if the size is number will be used as scale factor
         */
        "size"?: string | number;
        /**
          * Turn on spin for a number of second, or 'true' for infinite spin
         */
        "spin"?: number | boolean;
        /**
          * Turn on vertical flip
         */
        "vertical"?: boolean;
    }
    interface LtcPartnerCard {
        /**
          * CTA button extra text, placed under the button
         */
        "ctaExtraText"?: string;
        /**
          * CTA button link
         */
        "ctaLink"?: string;
        /**
          * CTA button text
         */
        "ctaText"?: string;
        /**
          * Featured Lender Attributes in JSON array string: `[["prop1", "value1"], ["prop2", "value2"]]`
         */
        "featuredAttributes"?: string;
        /**
          * If the Lender is featured. Changes the badge style.
         */
        "isFeatured"?: boolean;
        /**
          * Lender logo URL
         */
        "logoUrl": string;
        /**
          * Main Lender Attribute (top one) in JSON array string: `["prop", "value"]` or `["prop", "value", "tooltip"]`
         */
        "mainAttribute"?: string;
        /**
          * If `true`, will open the CTA action in a new browser window
         */
        "newWindow"?: boolean;
        /**
          * Lender rating
         */
        "rating": number;
        /**
          * Lender ratings count
         */
        "ratingCount"?: number;
        /**
          * Lender rating URL link
         */
        "ratingUrl"?: string;
    }
    interface LtcSingleCardTile {
        /**
          * The text to display as a badge on the card.
         */
        "badgeText"?: string;
        /**
          * URL linking to the terms, rates, and fees information for the card.
         */
        "bankTermsUrlRatesAndFees"?: string;
        /**
          * A unique identifier for the card.
         */
        "cardId"?: string;
        /**
          * The name of the card to be displayed. May contain HTML.
         */
        "cardName"?: string;
        /**
          * An array of highlights where each highlight is an array with [name, value, tooltip?]. `tooltip` is an optional string that, if present, provides additional information about the highlight. Example format: `[["Highlight Name", "Highlight Value", "Optional Tooltip"], [...]]` We will be adding Tooltip into the next iteration.
         */
        "highlights"?: string;
        /**
          * URL of the image to display the card.
         */
        "imageUrl"?: string;
        /**
          * The name of the card issuer.
         */
        "issuerName"?: string;
        /**
          * A string containing HTML content to be dynamically rendered within the component.
         */
        "offerTextDetails"?: string;
        /**
          * The overall star rating for the card. Ratings are on a scale from 1 to 5.
         */
        "overallStarRating"?: number;
        /**
          * URL to which users are redirected when they choose to apply for the card.
         */
        "redirectApplyNowLink"?: string;
    }
    interface LtcSlider {
        /**
          * The connect option can be used to control the bar between the handles or the edges of the slider. Pass a list of 0s and 1s for every connecting element, including the edges of the slider. The length of this list must match the handle count + 1. Setting 1 sets the bars between the handles, but not between the handles and the sliders edges.
         */
        "connect"?: string;
        /**
          * Disable the slider
         */
        "disabled"?: boolean;
        /**
          * Maximum value
         */
        "max"?: number;
        /**
          * Minimum value
         */
        "min"?: number;
        /**
          * This event is similar to the 'change' events on regular <input> elements. It fires when a user stops sliding, when a slider value is changed by 'tap', or on keyboard interaction.
         */
        "onLtChange"?: (event: LtcSliderCustomEvent<(string | number)[]>) => void;
        /**
          * This event is the opposite of the 'start' event. If fires when a handle is released (mouseup etc), or when a slide is canceled due to other reasons (such as mouse cursor leaving the browser window).
         */
        "onLtEnd"?: (event: LtcSliderCustomEvent<(string | number)[]>) => void;
        /**
          * Whenever a slider is changed to a new value, this event is fired. This function will trigger every time a slider stops changing, including after calls to the .set() method. This event can be considered as the 'end of slide'.
         */
        "onLtSet"?: (event: LtcSliderCustomEvent<(string | number)[]>) => void;
        /**
          * This event is useful to specifically listen to a handle being dragged, whilst ignoring other updates to the slider value. This event also fires on a change by a 'tap'. In most cases, the 'update' is the better choice.
         */
        "onLtSlide"?: (event: LtcSliderCustomEvent<(string | number)[]>) => void;
        /**
          * This event fires when a handle is clicked (mousedown, or the equivalent touch events).
         */
        "onLtStart"?: (event: LtcSliderCustomEvent<(string | number)[]>) => void;
        /**
          * Use this event when synchronizing the slider value to another element, such as an <input>. It fires every time the slider values are changed, either by a user or by calling API methods. Additionally, it fires immediately when bound. In most cases, this event should be more convenient than the 'slide' event.
         */
        "onLtUpdate"?: (event: LtcSliderCustomEvent<(string | number)[]>) => void;
        /**
          * The start option sets the number of handles and corresponding start positions.
         */
        "startValues"?: string;
        /**
          * By default, the slider slides fluently. In order to make the handles jump between intervals, the step option can be used.
         */
        "step"?: number;
    }
    interface LtcStarRating {
        /**
          * Rating value
         */
        "rating"?: number;
    }
    interface LtcSwitch {
        /**
          * How to control the alignment of the toggle and label on the cross axis.<br> `"start"`: The label and control will appear on the left of the cross axis.<br> `"end"`: The label and control will appear on the right of the cross axis.<br> `"center"`: The label and control will appear at the center of the cross axis.<br> This will only have effect in a top and bottom alignment.
         */
        "alignment"?: 'start' | 'center' | 'end';
        /**
          * If `true`, the switch is turned ON.
         */
        "checked"?: boolean;
        /**
          * If `true`, the user cannot interact with the switch.
         */
        "disabled"?: boolean;
        /**
          * Where to place the label relative to the input.
         */
        "labelPosition"?: 'right' | 'left' | 'top' | 'bottom';
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the toggle loses focus.
         */
        "onLtcBlur"?: (event: LtcSwitchCustomEvent<void>) => void;
        /**
          * Emitted when the user switches the toggle on or off.  This event will not emit when programmatically setting the `checked` property.
         */
        "onLtcChange"?: (event: LtcSwitchCustomEvent<boolean>) => void;
        /**
          * Emitted when the toggle has focus.
         */
        "onLtcFocus"?: (event: LtcSwitchCustomEvent<void>) => void;
        /**
          * Sets the type of control. Text or Icons
         */
        "type"?: 'text' | 'icons';
    }
    interface LtcTooltip {
        /**
          * Make the tooltip always visible. Useful if you control visibility by other means
         */
        "alwaysActive"?: boolean;
        /**
          * Force the tooltip to use dark theme
         */
        "forceDark"?: boolean;
        /**
          * Force the tooltip to use light theme
         */
        "forceLight"?: boolean;
        /**
          * Tooltip position
         */
        "placement"?: 'top' | 'bottom' | 'right' | 'left';
    }
    interface LtcWpmFooter {
    }
    interface IntrinsicElements {
        "inner-one": InnerOne;
        "ltc-accordion": LtcAccordion;
        "ltc-ai-message": LtcAiMessage;
        "ltc-ai-messages-list": LtcAiMessagesList;
        "ltc-amount-form-preset": LtcAmountFormPreset;
        "ltc-bar-chart": LtcBarChart;
        "ltc-chatbot": LtcChatbot;
        "ltc-debt-consolidation": LtcDebtConsolidation;
        "ltc-doughnut-chart": LtcDoughnutChart;
        "ltc-dropdown": LtcDropdown;
        "ltc-icon": LtcIcon;
        "ltc-input-text": LtcInputText;
        "ltc-lead-autoloan": LtcLeadAutoloan;
        "ltc-lead-home": LtcLeadHome;
        "ltc-lead-personal": LtcLeadPersonal;
        "ltc-lead-small-business": LtcLeadSmallBusiness;
        "ltc-loading-indicator": LtcLoadingIndicator;
        "ltc-loan-amount": LtcLoanAmount;
        "ltc-loan-payment": LtcLoanPayment;
        "ltc-md-icon": LtcMdIcon;
        "ltc-partner-card": LtcPartnerCard;
        "ltc-single-card-tile": LtcSingleCardTile;
        "ltc-slider": LtcSlider;
        "ltc-star-rating": LtcStarRating;
        "ltc-switch": LtcSwitch;
        "ltc-tooltip": LtcTooltip;
        "ltc-wpm-footer": LtcWpmFooter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "inner-one": LocalJSX.InnerOne & JSXBase.HTMLAttributes<HTMLInnerOneElement>;
            "ltc-accordion": LocalJSX.LtcAccordion & JSXBase.HTMLAttributes<HTMLLtcAccordionElement>;
            "ltc-ai-message": LocalJSX.LtcAiMessage & JSXBase.HTMLAttributes<HTMLLtcAiMessageElement>;
            "ltc-ai-messages-list": LocalJSX.LtcAiMessagesList & JSXBase.HTMLAttributes<HTMLLtcAiMessagesListElement>;
            "ltc-amount-form-preset": LocalJSX.LtcAmountFormPreset & JSXBase.HTMLAttributes<HTMLLtcAmountFormPresetElement>;
            "ltc-bar-chart": LocalJSX.LtcBarChart & JSXBase.HTMLAttributes<HTMLLtcBarChartElement>;
            "ltc-chatbot": LocalJSX.LtcChatbot & JSXBase.HTMLAttributes<HTMLLtcChatbotElement>;
            "ltc-debt-consolidation": LocalJSX.LtcDebtConsolidation & JSXBase.HTMLAttributes<HTMLLtcDebtConsolidationElement>;
            "ltc-doughnut-chart": LocalJSX.LtcDoughnutChart & JSXBase.HTMLAttributes<HTMLLtcDoughnutChartElement>;
            "ltc-dropdown": LocalJSX.LtcDropdown & JSXBase.HTMLAttributes<HTMLLtcDropdownElement>;
            "ltc-icon": LocalJSX.LtcIcon & JSXBase.HTMLAttributes<HTMLLtcIconElement>;
            "ltc-input-text": LocalJSX.LtcInputText & JSXBase.HTMLAttributes<HTMLLtcInputTextElement>;
            "ltc-lead-autoloan": LocalJSX.LtcLeadAutoloan & JSXBase.HTMLAttributes<HTMLLtcLeadAutoloanElement>;
            "ltc-lead-home": LocalJSX.LtcLeadHome & JSXBase.HTMLAttributes<HTMLLtcLeadHomeElement>;
            "ltc-lead-personal": LocalJSX.LtcLeadPersonal & JSXBase.HTMLAttributes<HTMLLtcLeadPersonalElement>;
            "ltc-lead-small-business": LocalJSX.LtcLeadSmallBusiness & JSXBase.HTMLAttributes<HTMLLtcLeadSmallBusinessElement>;
            "ltc-loading-indicator": LocalJSX.LtcLoadingIndicator & JSXBase.HTMLAttributes<HTMLLtcLoadingIndicatorElement>;
            "ltc-loan-amount": LocalJSX.LtcLoanAmount & JSXBase.HTMLAttributes<HTMLLtcLoanAmountElement>;
            "ltc-loan-payment": LocalJSX.LtcLoanPayment & JSXBase.HTMLAttributes<HTMLLtcLoanPaymentElement>;
            "ltc-md-icon": LocalJSX.LtcMdIcon & JSXBase.HTMLAttributes<HTMLLtcMdIconElement>;
            "ltc-partner-card": LocalJSX.LtcPartnerCard & JSXBase.HTMLAttributes<HTMLLtcPartnerCardElement>;
            "ltc-single-card-tile": LocalJSX.LtcSingleCardTile & JSXBase.HTMLAttributes<HTMLLtcSingleCardTileElement>;
            "ltc-slider": LocalJSX.LtcSlider & JSXBase.HTMLAttributes<HTMLLtcSliderElement>;
            "ltc-star-rating": LocalJSX.LtcStarRating & JSXBase.HTMLAttributes<HTMLLtcStarRatingElement>;
            "ltc-switch": LocalJSX.LtcSwitch & JSXBase.HTMLAttributes<HTMLLtcSwitchElement>;
            "ltc-tooltip": LocalJSX.LtcTooltip & JSXBase.HTMLAttributes<HTMLLtcTooltipElement>;
            "ltc-wpm-footer": LocalJSX.LtcWpmFooter & JSXBase.HTMLAttributes<HTMLLtcWpmFooterElement>;
        }
    }
}
